using AspNetCore.ReportingServices.ReportProcessing;
using System;

namespace AspNetCore.ReportingServices.ReportIntermediateFormat
{
	public sealed class AutoGeneratedGaugeInputValue : GaugeInputValue
	{
		[NonSerialized]
		private string m_stateIndicatorName;

		public AutoGeneratedGaugeInputValue(GaugePanel gaugePanel, string stateIndicatorName)
			: base(gaugePanel)
		{
			this.m_stateIndicatorName = stateIndicatorName;
		}

		protected override void InitializeValue(InitializationContext context)
		{
			int messageCount = context.ErrorContext.MessageCount;
			base.InitializeValue(context);
			ProcessingMessageList messages = context.ErrorContext.Messages;
			int messageCount2 = context.ErrorContext.MessageCount;
			if (messageCount2 > messageCount)
			{
				for (int i = messageCount; i < messageCount2 - messageCount; i++)
				{
					messages.RemoveAt(i);
				}
				context.ErrorContext.Register(ProcessingErrorCode.rsStateIndicatorInvalidAutoGenerateMinMaxExpression, Severity.Error, context.ObjectType, context.ObjectName, null, this.m_stateIndicatorName);
			}
		}
	}
}
